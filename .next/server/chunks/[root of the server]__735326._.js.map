{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file:///home/dell/Desktop/strip/stripe-intigration/src/app/server/prismaConnection.js"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\nconst prisma = new PrismaClient();\n(async function checkConnection() {\n  try {\n    await prisma.$connect();\n    console.log(\"Prisma connected to the database.\");\n  } catch (error) {\n    console.error(\"Failed to connect to the database:\");\n    process.exit(1);\n  }\n})();\nexport default prisma;\n\n// import { PrismaClient } from \"@prisma/client\";\n\n// const prisma = new PrismaClient();\n// (async function checkConnection() {\n//   try {\n//     await prisma.$connect();\n//     console.log(\"Prisma connected to the database.\");\n//   } catch (error) {\n//     console.error(\"Failed to connect to the database:\");\n//     process.exit(1);\n//   }\n// })();\n// export default prisma;\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAC/B,CAAC,eAAe;IACd,IAAI;QACF,MAAM,OAAO,QAAQ;QACrB,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,QAAQ,IAAI,CAAC;IACf;AACF,CAAC;uCACc;CAEf,iDAAiD;CAEjD,qCAAqC;CACrC,sCAAsC;CACtC,UAAU;CACV,+BAA+B;CAC/B,wDAAwD;CACxD,sBAAsB;CACtB,2DAA2D;CAC3D,uBAAuB;CACvB,MAAM;CACN,QAAQ;CACR,yBAAyB"}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 145, "column": 0}, "map": {"version":3,"sources":["file:///home/dell/Desktop/strip/stripe-intigration/src/app/%28backend%29/api/retrieve-payment-intent/route.js"],"sourcesContent":["import Stripe from \"stripe\";\nimport { NextResponse } from \"next/server\";\nimport prisma from \"@/app/server/prismaConnection.js\";\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY);\n\nexport async function GET(req) {\n  try {\n    const { searchParams } = new URL(req.url);\n    const id = searchParams.get(\"id\");\n\n    if (!id) {\n      return NextResponse.json({ error: \"PaymentIntent ID is required\" });\n    }\n    const paymentIntent = await stripe.paymentIntents.retrieve(id);\n\n    if (!paymentIntent) {\n      return NextResponse.json({ error: \"PaymentIntent not found\" });\n    }\n\n    const addData = await prisma.paymetProduct.create({\n      data: {\n        id: paymentIntent.id,\n        title: paymentIntent.description || \"No title provided\",\n        description: paymentIntent.description || \"NO Description Available\",\n        price: paymentIntent.amount / 100, // Stripe amount is in cents\n        // createdAt: new Date(paymentIntent.created || Date.now()),\n      },\n    });\n\n    return NextResponse.json({\n      message: \"Data of Payment\",\n      id: paymentIntent.id,\n      amount: paymentIntent.amount,\n      data: addData,\n      status: paymentIntent.status,\n    });\n  } catch (error) {\n    return NextResponse.json({ error: error.message });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AACA,MAAM,SAAS,IAAI,wJAAA,CAAA,UAAM,CAAC,QAAQ,GAAG,CAAC,iBAAiB;AAEhD,eAAe,IAAI,GAAG;IAC3B,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,IAAI,GAAG;QACxC,MAAM,KAAK,aAAa,GAAG,CAAC;QAE5B,IAAI,CAAC,IAAI;YACP,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA+B;QACnE;QACA,MAAM,gBAAgB,MAAM,OAAO,cAAc,CAAC,QAAQ,CAAC;QAE3D,IAAI,CAAC,eAAe;YAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA0B;QAC9D;QAEA,MAAM,UAAU,MAAM,0IAAA,CAAA,UAAM,CAAC,aAAa,CAAC,MAAM,CAAC;YAChD,MAAM;gBACJ,IAAI,cAAc,EAAE;gBACpB,OAAO,cAAc,WAAW,IAAI;gBACpC,aAAa,cAAc,WAAW,IAAI;gBAC1C,OAAO,cAAc,MAAM,GAAG;YAEhC;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,IAAI,cAAc,EAAE;YACpB,QAAQ,cAAc,MAAM;YAC5B,MAAM;YACN,QAAQ,cAAc,MAAM;QAC9B;IACF,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO,MAAM,OAAO;QAAC;IAClD;AACF"}},
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}